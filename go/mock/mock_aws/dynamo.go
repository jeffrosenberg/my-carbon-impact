// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeffrosenberg/my-carbon-impact/internal/db (interfaces: Client,PutItemInputGenerator)

// Package mock_aws is a generated GoMock package.
package mock_aws

import (
	context "context"
	reflect "reflect"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// PutItem mocks base method.
func (m *MockClient) PutItem(arg0 context.Context, arg1 *dynamodb.PutItemInput, arg2 ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutItem", varargs...)
	ret0, _ := ret[0].(*dynamodb.PutItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutItem indicates an expected call of PutItem.
func (mr *MockClientMockRecorder) PutItem(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutItem", reflect.TypeOf((*MockClient)(nil).PutItem), varargs...)
}

// MockPutItemInputGenerator is a mock of PutItemInputGenerator interface.
type MockPutItemInputGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPutItemInputGeneratorMockRecorder
}

// MockPutItemInputGeneratorMockRecorder is the mock recorder for MockPutItemInputGenerator.
type MockPutItemInputGeneratorMockRecorder struct {
	mock *MockPutItemInputGenerator
}

// NewMockPutItemInputGenerator creates a new mock instance.
func NewMockPutItemInputGenerator(ctrl *gomock.Controller) *MockPutItemInputGenerator {
	mock := &MockPutItemInputGenerator{ctrl: ctrl}
	mock.recorder = &MockPutItemInputGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPutItemInputGenerator) EXPECT() *MockPutItemInputGeneratorMockRecorder {
	return m.recorder
}

// GeneratePutItemInput mocks base method.
func (m *MockPutItemInputGenerator) GeneratePutItemInput() (*dynamodb.PutItemInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePutItemInput")
	ret0, _ := ret[0].(*dynamodb.PutItemInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePutItemInput indicates an expected call of GeneratePutItemInput.
func (mr *MockPutItemInputGeneratorMockRecorder) GeneratePutItemInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePutItemInput", reflect.TypeOf((*MockPutItemInputGenerator)(nil).GeneratePutItemInput))
}
