// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jeffrosenberg/my-carbon-impact/pkg/interfaces (interfaces: UuidGenerator)

// Package mock_uuid is a generated GoMock package.
package mock_uuid

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockUuidGenerator is a mock of UuidGenerator interface.
type MockUuidGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockUuidGeneratorMockRecorder
}

// MockUuidGeneratorMockRecorder is the mock recorder for MockUuidGenerator.
type MockUuidGeneratorMockRecorder struct {
	mock *MockUuidGenerator
}

// NewMockUuidGenerator creates a new mock instance.
func NewMockUuidGenerator(ctrl *gomock.Controller) *MockUuidGenerator {
	mock := &MockUuidGenerator{ctrl: ctrl}
	mock.recorder = &MockUuidGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUuidGenerator) EXPECT() *MockUuidGeneratorMockRecorder {
	return m.recorder
}

// NewV1 mocks base method.
func (m *MockUuidGenerator) NewV1() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV1")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewV1 indicates an expected call of NewV1.
func (mr *MockUuidGeneratorMockRecorder) NewV1() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV1", reflect.TypeOf((*MockUuidGenerator)(nil).NewV1))
}

// NewV3 mocks base method.
func (m *MockUuidGenerator) NewV3(arg0 uuid.UUID, arg1 string) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV3", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// NewV3 indicates an expected call of NewV3.
func (mr *MockUuidGeneratorMockRecorder) NewV3(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV3", reflect.TypeOf((*MockUuidGenerator)(nil).NewV3), arg0, arg1)
}

// NewV4 mocks base method.
func (m *MockUuidGenerator) NewV4() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV4")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewV4 indicates an expected call of NewV4.
func (mr *MockUuidGeneratorMockRecorder) NewV4() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV4", reflect.TypeOf((*MockUuidGenerator)(nil).NewV4))
}

// NewV5 mocks base method.
func (m *MockUuidGenerator) NewV5(arg0 uuid.UUID, arg1 string) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV5", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// NewV5 indicates an expected call of NewV5.
func (mr *MockUuidGeneratorMockRecorder) NewV5(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV5", reflect.TypeOf((*MockUuidGenerator)(nil).NewV5), arg0, arg1)
}

// NewV6 mocks base method.
func (m *MockUuidGenerator) NewV6() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV6")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewV6 indicates an expected call of NewV6.
func (mr *MockUuidGeneratorMockRecorder) NewV6() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV6", reflect.TypeOf((*MockUuidGenerator)(nil).NewV6))
}

// NewV7 mocks base method.
func (m *MockUuidGenerator) NewV7(arg0 uuid.Precision) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewV7", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewV7 indicates an expected call of NewV7.
func (mr *MockUuidGeneratorMockRecorder) NewV7(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewV7", reflect.TypeOf((*MockUuidGenerator)(nil).NewV7), arg0)
}
